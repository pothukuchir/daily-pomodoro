{"ast":null,"code":"var _jsxFileName = \"/Users/ravikant/Documents/Projects/JavaScript Coding/ReactJS/daily-app/daily-app/src/Components/Calendar.js\";\nimport React from 'react';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin, { Draggable } from '@fullcalendar/interaction';\nimport { INITIAL_EVENTS, createEventId } from './event-utils';\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport External from './External';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nexport default class DemoApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weekendsVisible: true,\n      currentEvents: []\n    };\n\n    this.handleWeekendsToggle = () => {\n      this.setState({\n        weekendsVisible: !this.state.weekendsVisible\n      });\n    };\n\n    this.handleDateSelect = selectInfo => {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      let endTime = new Date(selectInfo.startStr);\n      endTime.setMinutes(endTime.getMinutes() + 25);\n      console.log(endTime);\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: endTime,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n\n    this.handleEvents = events => {\n      this.setState({\n        currentEvents: events\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, this.renderSidebar(), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      theme: \"true\",\n      themeSystem: \"bootstrap\",\n      themeName: \"Darkly\",\n      initialView: \"dayGridMonth\",\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: true,\n      weekends: this.state.weekendsVisible,\n      initialEvents: INITIAL_EVENTS // alternatively, use the `events` setting to fetch from a feed\n      ,\n      select: this.handleDateSelect,\n      eventContent: renderEventContent // custom render function\n      ,\n      eventClick: this.handleEventClick,\n      eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n      ,\n      defaultTimedEventDuration: \"00:25:00\",\n      droppable: true\n      /* you can update a remote database when these fire:\n      eventAdd={function(){}}\n      eventChange={function(){}}\n      eventRemove={function(){}}\n      */\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  renderSidebar() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-app-sidebar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Jumbotron, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(External, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, eventInfo.timeText), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, eventInfo.event.title));\n}\n\nfunction renderSidebarEvent(event) {\n  return /*#__PURE__*/React.createElement(\"li\", {\n    key: event.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, formatDate(event.start, {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  })), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, event.title));\n}","map":{"version":3,"sources":["/Users/ravikant/Documents/Projects/JavaScript Coding/ReactJS/daily-app/daily-app/src/Components/Calendar.js"],"names":["React","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","Draggable","INITIAL_EVENTS","createEventId","bootstrapPlugin","External","Jumbotron","DemoApp","Component","state","weekendsVisible","currentEvents","handleWeekendsToggle","setState","handleDateSelect","selectInfo","title","prompt","calendarApi","view","calendar","endTime","Date","startStr","setMinutes","getMinutes","console","log","unselect","addEvent","id","start","end","allDay","handleEvents","events","render","renderSidebar","left","center","right","renderEventContent","handleEventClick","eventInfo","timeText","event","renderSidebarEvent","year","month","day"],"mappings":"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","sourcesContent":["import React from 'react'\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin, { Draggable } from '@fullcalendar/interaction'\nimport { INITIAL_EVENTS, createEventId } from './event-utils'\nimport bootstrapPlugin from '@fullcalendar/bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport External from './External'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\nexport default class DemoApp extends React.Component {\n\n  state = {\n    weekendsVisible: true,\n    currentEvents: []\n  }\n\n  render() {\n    return (\n      <div className='demo-app'>\n        {this.renderSidebar()}\n        <div className='demo-app-main'>\n          <FullCalendar\n            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n            headerToolbar={{\n              left: 'prev,next today',\n              center: 'title',\n              right: 'dayGridMonth,timeGridWeek,timeGridDay'\n            }}\n            theme='true'\n            themeSystem='bootstrap'\n            themeName='Darkly'\n            initialView='dayGridMonth'\n            editable={true}\n            selectable={true}\n            selectMirror={true}\n            dayMaxEvents={true}\n            weekends={this.state.weekendsVisible}\n            initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\n            select={this.handleDateSelect}\n            eventContent={renderEventContent} // custom render function\n            eventClick={this.handleEventClick}\n            eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\n            defaultTimedEventDuration='00:25:00'\n            droppable={true}\n            /* you can update a remote database when these fire:\n            eventAdd={function(){}}\n            eventChange={function(){}}\n            eventRemove={function(){}}\n            */\n          />\n        </div>\n      </div>\n    )\n  }\n\n  renderSidebar() {\n    return (\n      <div className='demo-app-sidebar'>\n        <Jumbotron>\n\n        </Jumbotron>\n        <div>\n          <External/>\n        </div>\n      </div>\n    )\n  }\n\n  handleWeekendsToggle = () => {\n    this.setState({\n      weekendsVisible: !this.state.weekendsVisible\n    })\n  }\n\n  handleDateSelect = (selectInfo) => {\n    let title = prompt('Please enter a new title for your event')\n    let calendarApi = selectInfo.view.calendar\n\n    let endTime = new Date(selectInfo.startStr)\n    endTime.setMinutes(endTime.getMinutes() + 25)\n    console.log(endTime)\n\n    calendarApi.unselect() // clear date selection\n\n    if (title) {\n      calendarApi.addEvent({\n        id: createEventId(),\n        title,\n        start: selectInfo.startStr,\n        end: endTime,\n        allDay: selectInfo.allDay\n      })\n      \n    }\n  }\n\n\n\n  handleEvents = (events) => {\n    this.setState({\n      currentEvents: events\n    })\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return (\n    <>\n      <b>{eventInfo.timeText}</b>\n      <i>{eventInfo.event.title}</i>\n    </>\n  )\n}\n\nfunction renderSidebarEvent(event) {\n  return (\n    <li key={event.id}>\n      <b>{formatDate(event.start, {year: 'numeric', month: 'short', day: 'numeric'})}</b>\n      <i>{event.title}</i>\n    </li>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}