{"ast":null,"code":"var _jsxFileName = \"/Users/ravikant/Documents/Projects/JavaScript Coding/ReactJS/daily-app/daily-app/src/Components/External.js\";\nimport { Draggable } from '@fullcalendar/interaction';\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nexport class External extends Component {\n  constructor(props) {\n    super(props); // Setting up state \n\n    this.state = {\n      userInput: \"\",\n      list: []\n    };\n  } // Set a user input value\n\n\n  updateInput(value) {\n    this.setState({\n      userInput: value\n    });\n  } // Add item if user input is not empty\n\n\n  addItem() {\n    if (this.state.userInput !== '') {\n      const userInput = {\n        id: Math.random(),\n        value: this.state.userInput\n      }; // Update list\n\n      const list = [...this.state.list];\n      let updatedValue = 'Meet with ' + userInput;\n      console.log(updatedValue.toString());\n      list.push(userInput); // reset\n\n      this.setState({\n        list,\n        userInput: \"\"\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"external-events\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, \"Draggable events\"), this.state.list.map(item => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: \"fc-event fc-h-event fc-daygrid-event fc-daygrid-block-event\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        class: \"fc-event-main\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 33\n        }\n      }, item.value));\n    }), /*#__PURE__*/React.createElement(InputGroup, {\n      className: \"mb-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      placeholder: \"add item . . . \",\n      size: \"sm\",\n      value: this.state.userInput,\n      onChange: item => this.updateInput(item.target.value),\n      \"aria-label\": \"add something\",\n      \"aria-describedby\": \"basic-addon2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"dark\",\n      size: \"sm\",\n      onClick: () => this.addItem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }, \"Meet with\")), /*#__PURE__*/React.createElement(InputGroup.Append, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"dark\",\n      size: \"sm\",\n      onClick: () => this.addItem(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, \"Work on\"))));\n  }\n\n  componentDidMount() {\n    let draggableEl = document.getElementById('external-events');\n    new Draggable(draggableEl, {\n      itemSelector: '.fc-event',\n      eventData: function (eventEl) {\n        return {\n          title: eventEl.innerText\n        };\n      }\n    });\n  }\n\n}\nexport default External;","map":{"version":3,"sources":["/Users/ravikant/Documents/Projects/JavaScript Coding/ReactJS/daily-app/daily-app/src/Components/External.js"],"names":["Draggable","React","Component","Button","InputGroup","FormControl","External","constructor","props","state","userInput","list","updateInput","value","setState","addItem","id","Math","random","updatedValue","console","log","toString","push","render","map","item","target","componentDidMount","draggableEl","document","getElementById","itemSelector","eventData","eventEl","title","innerText"],"mappings":"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","sourcesContent":["import { Draggable } from '@fullcalendar/interaction'\nimport React, { Component } from 'react'\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\n\n\n\nexport class External extends Component {\n    constructor(props) { \n        super(props); \n      \n        // Setting up state \n        this.state = { \n          userInput : \"\", \n          list:[] \n        } \n    }\n\n    // Set a user input value\n    updateInput(value){\n        this.setState({\n            userInput: value,\n        });\n    }\n\n    // Add item if user input is not empty\n    addItem(){\n        if(this.state.userInput!==''){\n            const userInput = {\n                id: Math.random(),\n                value: this.state.userInput\n            };\n\n            // Update list\n            const list = [...this.state.list];\n            let updatedValue = 'Meet with ' + userInput;\n            console.log(updatedValue.toString())\n            list.push(userInput);\n\n            // reset\n            this.setState({\n                list,\n                userInput: \"\"\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div id=\"external-events\">\n                <h4>Draggable events</h4>\n                    {this.state.list.map(item => {return(\n                            <div class='fc-event fc-h-event fc-daygrid-event fc-daygrid-block-event'>\n                                <div class='fc-event-main'>{item.value}</div>\n                            </div>\n\n                    )})}\n                     \n               \n                <InputGroup className=\"mb-1\"> \n                    <FormControl \n                        placeholder=\"add item . . . \"\n                        size=\"sm\"\n                        value = {this.state.userInput} \n                        onChange = {item => this.updateInput(item.target.value)} \n                        aria-label=\"add something\"\n                        aria-describedby=\"basic-addon2\"\n                    /> \n                    <InputGroup.Append> \n                        <Button \n                        variant=\"dark\"\n                        size=\"sm\"\n                        onClick = {()=>this.addItem()} \n                        > \n                        Meet with \n                        </Button> \n                    </InputGroup.Append> \n                    <InputGroup.Append> \n                        <Button \n                        variant=\"dark\"\n                        size=\"sm\"\n                        onClick = {()=>this.addItem()} \n                        > \n                        Work on \n                        </Button> \n                    </InputGroup.Append> \n                </InputGroup> \n            </div>\n        )\n    }\n   componentDidMount(){\n        let draggableEl = document.getElementById('external-events');\n        new Draggable(draggableEl, {\n            itemSelector: '.fc-event',\n            eventData: function(eventEl) {\n              return {\n                title: eventEl.innerText\n              };\n            }\n          });\n   }\n}\n\nexport default External\n"]},"metadata":{},"sourceType":"module"}