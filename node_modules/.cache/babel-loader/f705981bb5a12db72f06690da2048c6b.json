{"ast":null,"code":"var _jsxFileName = \"/Users/ravikant/Documents/Projects/JavaScript Coding/ReactJS/daily-app/daily-app/src/Components/Calendar.js\";\nimport React, { Component } from 'react';\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\"; // import { CoreCalendar } from '@fullcalendar/core';\n\nimport interactionPlugin from '@fullcalendar/interaction'; // for selectable\n\nimport { createEventId } from './events';\n\nclass Calendar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSelect = selectInfo => {\n      let title = prompt('Please enter new title for the event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect();\n\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrap-calendar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      id: \"calendar-display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FullCalendar, {\n      plugins: [interactionPlugin, timeGridPlugin],\n      initialView: \"timeGrid\",\n      selectable: \"true\",\n      events: [{\n        id: 'a',\n        title: 'my event',\n        start: '2020-09-17 07:20'\n      }, {\n        id: 'b',\n        title: 'my event',\n        start: '2020-09-17 10:20'\n      }],\n      select: this.handleSelect,\n      eventContent: renderEventContent // custom render function\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, eventInfo.timeText), /*#__PURE__*/React.createElement(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, eventInfo.event.title));\n}\n\nexport default Calendar;","map":{"version":3,"sources":["/Users/ravikant/Documents/Projects/JavaScript Coding/ReactJS/daily-app/daily-app/src/Components/Calendar.js"],"names":["React","Component","FullCalendar","timeGridPlugin","interactionPlugin","createEventId","Calendar","handleSelect","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","id","start","startStr","end","endStr","allDay","render","renderEventContent","eventInfo","timeText","event"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,cAAP,MAA2B,wBAA3B,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,2BAA9B,C,CAA2D;;AAC3D,SAASC,aAAT,QAA8B,UAA9B;;AAGA,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AAAA;AAAA;;AAAA,SA8B7BM,YA9B6B,GA8BbC,UAAD,IAAgB;AAC3B,UAAIC,KAAK,GAAGC,MAAM,CAAC,sCAAD,CAAlB;AACA,UAAIC,WAAW,GAAGH,UAAU,CAACI,IAAX,CAAgBC,QAAlC;AAEAF,MAAAA,WAAW,CAACG,QAAZ;;AAEA,UAAGL,KAAH,EAAS;AACLE,QAAAA,WAAW,CAACI,QAAZ,CAAqB;AACjBC,UAAAA,EAAE,EAAEX,aAAa,EADA;AAEjBI,UAAAA,KAFiB;AAGjBQ,UAAAA,KAAK,EAAET,UAAU,CAACU,QAHD;AAIjBC,UAAAA,GAAG,EAAEX,UAAU,CAACY,MAJC;AAKjBC,UAAAA,MAAM,EAAEb,UAAU,CAACa;AALF,SAArB;AAOH;AACJ,KA7C4B;AAAA;;AAC7BC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,EAAE,EAAC,kBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,YAAD;AACI,MAAA,OAAO,EAAE,CAAClB,iBAAD,EAAoBD,cAApB,CADb;AAEI,MAAA,WAAW,EAAC,UAFhB;AAGI,MAAA,UAAU,EAAC,MAHf;AAII,MAAA,MAAM,EAAG,CACL;AACEa,QAAAA,EAAE,EAAE,GADN;AAEEP,QAAAA,KAAK,EAAE,UAFT;AAGEQ,QAAAA,KAAK,EAAE;AAHT,OADK,EAML;AACID,QAAAA,EAAE,EAAE,GADR;AAEIP,QAAAA,KAAK,EAAE,UAFX;AAGIQ,QAAAA,KAAK,EAAE;AAHX,OANK,CAJb;AAgBM,MAAA,MAAM,EAAG,KAAKV,YAhBpB;AAiBM,MAAA,YAAY,EAAEgB,kBAjBpB,CAiBwC;AAjBxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ;AA0BH;;AA5B4B;;AA+CjC,SAASA,kBAAT,CAA4BC,SAA5B,EAAuC;AACnC,sBACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,SAAS,CAACC,QAAd,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAID,SAAS,CAACE,KAAV,CAAgBjB,KAApB,CAFF,CADF;AAMD;;AACH,eAAeH,QAAf","sourcesContent":["import React, { Component } from 'react'\nimport FullCalendar from \"@fullcalendar/react\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\n// import { CoreCalendar } from '@fullcalendar/core';\nimport interactionPlugin from '@fullcalendar/interaction'; // for selectable\nimport { createEventId } from './events'\n\n\nclass Calendar extends Component {\n    render() {\n        return (\n            <div className=\"wrap-calendar\">\n                <div className=\"App\" id=\"calendar-display\">\n                    <FullCalendar\n                        plugins={[interactionPlugin, timeGridPlugin]}\n                        initialView=\"timeGrid\"\n                        selectable=\"true\"\n                        events= {[\n                            {\n                              id: 'a',\n                              title: 'my event',\n                              start: '2020-09-17 07:20'\n                            },\n                            {\n                                id: 'b',\n                                title: 'my event',\n                                start: '2020-09-17 10:20'  \n                            }\n                          ]}\n                          select= {this.handleSelect}\n                          eventContent={renderEventContent} // custom render function\n\n                    />\n                </div>\n            </div>\n        )\n    }\n   \n    handleSelect = (selectInfo) => {\n        let title = prompt('Please enter new title for the event')\n        let calendarApi = selectInfo.view.calendar\n\n        calendarApi.unselect()\n\n        if(title){\n            calendarApi.addEvent({\n                id: createEventId(),\n                title,\n                start: selectInfo.startStr,\n                end: selectInfo.endStr,\n                allDay: selectInfo.allDay\n            })\n        }\n    }\n}\nfunction renderEventContent(eventInfo) {\n    return (\n      <>\n        <b>{eventInfo.timeText}</b>\n        <i>{eventInfo.event.title}</i>\n      </>\n    )\n  }\nexport default Calendar\n"]},"metadata":{},"sourceType":"module"}